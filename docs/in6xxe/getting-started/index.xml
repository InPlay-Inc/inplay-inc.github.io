<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on InPlay Doc</title><link>/docs/in6xxe/getting-started.html</link><description>Recent content in Getting Started on InPlay Doc</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>InPlay Inc</copyright><atom:link href="/docs/in6xxe/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/docs/in6xxe/getting-started/rtt-viewer-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/rtt-viewer-guide.html</guid><description>RTT Viewer Guide # Introduction # J-Link RTT Viewer is a Windows GUI application that uses RTT functionality on the debugging host. RTT Viewer can be used independently, opening its own connection to the J-Link and connecting in parallel to the target of the ongoing debugging session or alternatively to it using an existing J-Link connection. The RTT Viewer supports the main functions of RTT:
Terminal output on channel Sending text input to channel Up to 16 virtual terminals with only one target channel Controlling text output Recording data on channel Configuration # Install Jlink # Should setup in-dev\tools\ InPlayToolsSetup.</description></item><item><title>BLE5.0 AT Command Set</title><link>/docs/in6xxe/getting-started/inplay-ble5.0-at-command-set.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/inplay-ble5.0-at-command-set.html</guid><description>Inplay BLE 5.0 AT Command Set # INTRODUCTION # Inplay IN6xx BLE module is a standard Bluetooth Low Energy (BLE) 5.0 certified RF module. It introduces a private service as interface of data streaming between two BLE devices transparently.
IN6xx BLE module provides the control interface based on ASCII commands, say AT commands. They are used to configure parameters, retrieve module state, control actions of module, etc. All configuration changes can be optionally remained in Non-Volatile Memory (Flash) and survive the following power cycle.</description></item><item><title>Debug Guide</title><link>/docs/in6xxe/getting-started/debug-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/debug-guide.html</guid><description>Debug Guide # Introduction # This document provides a guide on how to use keil to debug project to the IN6XXE chip.
Debug Step: # Enter Debugging # Copy jlink_flash_setup.ini file in in-dev\proj\common\JLINK to project directory
Edit .ini file with following steps (1) change the setting in jlink_flash_setup.ini according to the in_config.h. (2)change the setup mode according to in_config.h Follow these steps to select the .ini file. Click the debug button.</description></item><item><title>HCI Command</title><link>/docs/in6xxe/getting-started/hci_command.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/hci_command.html</guid><description>HCI Command # Introduction to BLE HCI Commands # BLE HCI commands are standardized instructions exchanged between the host and the Bluetooth controller to manage and configure Bluetooth communication. These commands enable the host to initiate various actions, such as establishing connections, configuring parameters, and managing the overall behavior of the Bluetooth device.
HCI Command Structure # BLE HCI commands follow a specific structure, adhering to a standardized format that includes an HCI type, opcode, and parameters.</description></item><item><title>Introduction to IN6XXE DK</title><link>/docs/in6xxe/getting-started/introduction-to-in6xxe-dk.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/introduction-to-in6xxe-dk.html</guid><description>Overview # IN6XXE DK is a development board for IN6XXE series chips. You can download the schematics:
SCH_IN612LE-QFN48-DK-ver1.1
SCH_IN612LE-QFN56-DK-ver1.1
Hardware description # Component Description 1 RF Connector 2 I2C pull up R19:GPIO_0_0, R20:GPIO_0_1; R21:GPIO_0_3, R22:GPIO_0_4 3 VDDQ Jumper When programming eFuse, connect VDDQ to 3.3V 4 GPIO Test Pin GPIO pins 5 GPIO Test Hole GPIO pins 6 GND TP1,2,3,7 These test points are connected to GND 7 Power Jumper Control power supply, see Power Supply 8 Cortex_debug+ETM Debug port 9 1.</description></item><item><title>JFlash Programming</title><link>/docs/in6xxe/getting-started/jflash-download-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/jflash-download-guide.html</guid><description>JFlash Programming Guide # Introduction # This document provides a guide on how to use J-Flash to download bin file to the IN6XXE chip.
J-Flash is a part of the J-Link tool series developed by Segger, offers a reliable solution for programming Flash memory on embedded systems.
Prerequisites # J-Link Debugger hardware.Get it on Segger web site. J-Link Software and Documentation Pack installed on your host computer(Version 7.62 or later is recommended).</description></item><item><title>Quick Start with GCC</title><link>/docs/in6xxe/getting-started/quick-start-with-gcc.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/quick-start-with-gcc.html</guid><description>Quick Start Guide with GCC # Introduction # This document introduce how to use GCC for software development.
Preparation # InPlay DK Board JLink Debugger InPlay SDK Usb cable. Install Tools # Download and install Arm GNU Toolchain (version &amp;ldquo;arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi&amp;rdquo; is recommended).
Install Make
sudo apt-get update sudo apt-get install build-essential Generate configuration File (optional) # Demo projects are in &amp;ldquo;SDK/in-dev/proj&amp;rdquo;. Each project has a configuration file named &amp;ldquo;in_config.h&amp;rdquo;. This file is located in the &amp;ldquo;inc&amp;rdquo; directory of the project.</description></item><item><title>SMULL Command Set</title><link>/docs/in6xxe/getting-started/inplay-smull-development-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/getting-started/inplay-smull-development-guide.html</guid><description>Inplay SMULL Command Set For Transparent Data Transmission # Introduction # IN618 is InPlayâ€™s SMULL SoC product which features synchronous multi-node low-latency protocol (SMULL) stack with 2.4Ghz frequency band RF radio and MCU system integrated. The device incorporates an InPlay SMULL radio and subsystem that contains the RF transceiver, baseband, PHY and link layer engines.The physical layer has the digital PHY and RF transceiver that transmits and receives GFSK packets at 2Mbps.</description></item></channel></rss>