<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Driver on InPlay Doc</title><link>/docs/in6xxe/driver.html</link><description>Recent content in Driver on InPlay Doc</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>InPlay Inc</copyright><atom:link href="/docs/in6xxe/driver/index.xml" rel="self" type="application/rss+xml"/><item><title>ADC Guide</title><link>/docs/in6xxe/driver/adc-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/driver/adc-guide.html</guid><description>ADC Guide # Overview # The ADC (Analog-to-Digital Converter) is a crucial component in electronic systems that facilitates the conversion of analog signals into digital values. This process is essential for interfacing with digital systems, microcontrollers, and processors, allowing them to process and interpret real-world analog data.
Key Features # Precision # The ADC operates with a precision of 12 bits, providing a fine resolution for accurate signal representation.</description></item><item><title>Counter Guide</title><link>/docs/in6xxe/driver/counter-development-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/driver/counter-development-guide.html</guid><description>Counter Guide # Introduction # The counter block contains 4 32-bit identical counters. Each counter can be independently programmed to perform a wide range of functions including frequency measurement, event counting, interval measurement, pulse generation, delay timing and pulse width modulation.
The 6XX series chips have 4 built-in counter modules, corresponding to these 8 pins (GPIO port 2). The counter module can be used to achieve functions like PWM, Timer, IrDa, and 7816.</description></item><item><title>CRC Guide</title><link>/docs/in6xxe/driver/crc-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/driver/crc-guide.html</guid><description>CRC Guide # Overview # CRC (Cyclic Redundancy Check) is a widely used error-detecting code in digital communication networks and storage devices. It is a mathematical algorithm that calculates a checksum based on the data being transmitted or stored, which can then be used to detect errors during transmission or storage.
Features # Support calculate fix length data or variable length data Support DMA(need occupy one I2C DMA channel) Support configuare parameters such as polynomial selection, initial value, XOR output and so on.</description></item><item><title>GPIO Guide</title><link>/docs/in6xxe/driver/gpio-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/driver/gpio-guide.html</guid><description>GPIO Guide # Overview # The GPIO (General Purpose Input/Output) is organized into five ports. And there are two types of GPIOs: mixed-signal GPIOs and digital GPIOs:
Digital GPIO: Port: Port 0, port 1, port 3 and port 4 Can NOT be used as sensor ADC input Mixed GPIO: Port: Port 2 Can be used as sensor ADC input Output / Input # Refer to &amp;ldquo;proj_drv_gpio&amp;rdquo;.
Configure GPIO to output and output high/low:</description></item><item><title>NanoSync Engine Guide</title><link>/docs/in6xxe/driver/trigger-handler-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/driver/trigger-handler-guide.html</guid><description>NanoSync Engine Guide # Introduction # NanoSync engine(trigger handler block) which can be used to perform many real-time events or tasks without the CPUâ€™s intervention.
The NanoSync engine operates based on triggers and handlers. When a trigger (also called an event) happens, a handler will be invoked. A handler consists of a sequence of hardware actions (also called hardware tasks), which can be automatically executed by the hardware without the CPU intervention.</description></item><item><title>NanoSync Timer Guide</title><link>/docs/in6xxe/driver/advanced-timer-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/driver/advanced-timer-guide.html</guid><description>NanoSync Timer Guide # Introduction # The NanoSync timers(Advanced Timer) are capable of capturing the times of multiple real-time triggers or events simultaneously. The NanoSync timers can be also used as trigger sources for the NanoSync engine(Trigger Handler). If the current time of a NanoSync timer equals to the programmed target time (called emit time), a trigger (We also call the trigger from SyncTimer as an emit) happens. Each SyncTimer supports up to 10 emit time target.</description></item><item><title>SPI Guide</title><link>/docs/in6xxe/driver/spi-guide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/in6xxe/driver/spi-guide.html</guid><description>SPI Guide # Overview # SPI, which stands for Serial Peripheral Interface, is a high-speed, full-duplex, synchronous communication bus that allows data transmission between a microcontroller and peripheral devices. It utilizes a master-slave model, with the master device controlling a set of slave devices. SPI requires four signal lines:
SCLK for synchronization
MOSI for data transmission from master to slave
MISO for data transmission from slave to master
SSN for selecting the slave device to communicate with.</description></item></channel></rss>